// input -> a weighted graph and a source
// ouput -> distance of all nodes from the source

/*
u -> v

if d[u] + c(u, v) < d[v]:
    d[v] = d[u] + c(u, v)

*/


// space complexity -> O(n)
// time complexity -> O(n^2)

- create a distance array "d"
- initialize all values of "d" to infinity 
- d[src] = 0
- create a visited array and mark all nodes as unvisited

- for i = 0  to n - 1:
    - pick the "unvisited" node with minimum d[node] 
    - visited[node] = 1
    - for all adj_node of node:
        - if d[node] + c(node, adj_node) < d[adj_node]:
            - d[adj_node] = d[node] + c(node, adj_node)

- ouput array "d" 
